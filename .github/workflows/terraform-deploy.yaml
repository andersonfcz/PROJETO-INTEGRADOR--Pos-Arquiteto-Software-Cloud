name: "Terraform Deployment"

on:
    push:
        branches:
            - main
        paths:
            - terraform/**

    pull_request:
        paths:
            - terraform/**

    workflow_dispatch:

jobs:
    terraform:
        name: "Terraform Deployment"
        runs-on: ubuntu-latest
        env: 
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

        defaults:
            run:
                working-directory: terraform
                shell: bash
        steps:

            - uses: actions/checkout@v2.7.0
            - uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.1.7

            - name: Terraform init
              id: init
              run: terraform init

            - name: Terraform validate
              id: validate
              run: terraform validate -no-color
            
            - name: Terraform validate status
              if: steps.validate.outcome == 'failure'
              run: exit 1
            
            - name: Terraform plan
              id: plan
              if: github.event_name == 'pull_request'
              run: terraform plan -no-color -input=false
              continue-on-error: true
              env:
                TF_VAR_db_user: ${{ secrets.DB_USER }}
                TF_VAR_db_password: ${{ secrets.DB_PASS }}
                TF_VAR_db_name: ${{ secrets.DB_NAME }}


            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`                  
                  <details><summary>Validation Output</summary>
            
                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`
            
                  </details>
            
                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
                  <details><summary>Show Plan</summary>
            
                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`
            
                  </details>
            
                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })
            
            - name: Terraform plan status
              if: steps.plan.outcome == 'failure'
              run: exit 1
              
            - name: Terraform apply
              id: apply
              if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
              run: terraform apply -auto-approve -input=false
              env:
                TF_VAR_db_user: ${{ secrets.DB_USER }}
                TF_VAR_db_password: ${{ secrets.DB_PASS }}
                TF_VAR_db_name: ${{ secrets.DB_NAME }}